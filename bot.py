import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
try:
    from telegram.constants import ParseMode
except ImportError:
    # Fallback for older versions
    from telegram import ParseMode

from config import TELEGRAM_BOT_TOKEN, logger
from openai_service import openai_service
from quiz_handler import quiz_handler

class OldChurchSlavonicBot:
    """Main bot class for Inter-Slavic learning"""
    
    def __init__(self):
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """Set up all bot command and callback handlers"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user = update.effective_user
        logger.info(f"User {user.id} ({user.username}) started the bot")
        
        welcome_message = (
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! üëã\n\n"
            "üèõÔ∏è **–ë–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –º–µ–∂—Å–ª–∞–≤—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞**\n\n"
            "–ó–¥–µ—Å—å –≤—ã –∏–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã –º–µ–∂—Å–ª–∞–≤—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–µ —É—Ä–æ–∫–∏ "
            "–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è. –ö–∞–∂–¥—ã–π —É—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ "
            "–∏ –≤–æ–ø—Ä–æ—Å –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!"
        )
        
        keyboard = [[InlineKeyboardButton("üìñ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="get_assignment")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_message = (
            "ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**\n"
            "1. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ¬ª –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞\n"
            "2. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ\n"
            "3. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
            "4. –ü–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É\n\n"
            "–£–¥–∞—á–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –º–µ–∂—Å–ª–∞–≤—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! üìö"
        )
        
        keyboard = [[InlineKeyboardButton("üìñ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="get_assignment")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            help_message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle button callbacks"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        try:
            if data == "get_assignment":
                await self.handle_get_assignment(query, user_id)
            elif data.startswith("answer_"):
                await self.handle_quiz_answer(query, user_id, data)
            else:
                logger.warning(f"Unknown callback data: {data}")
        
        except Exception as e:
            logger.error(f"Error handling callback {data} for user {user_id}: {e}")
            await query.edit_message_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üìñ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="get_assignment")
                ]])
            )
    
    async def handle_get_assignment(self, query, user_id: int):
        """Handle request for new assignment"""
        # End any existing session
        quiz_handler.end_session(user_id)
        
        # Show loading message
        await query.edit_message_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ...")
        
        try:
            # Generate lesson and quiz using OpenAI
            lesson_data = await openai_service.generate_lesson_and_quiz()
            
            # Create new quiz session
            session = quiz_handler.create_session(user_id, lesson_data)
            
            # Format and send lesson message with quiz options
            message = quiz_handler.format_lesson_message(session)
            
            # Create keyboard with answer options
            keyboard = []
            for i, option in enumerate(session.options):
                keyboard.append([InlineKeyboardButton(
                    option,
                    callback_data=f"answer_{i}_{option}"
                )])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"Error generating assignment for user {user_id}: {e}")
            await query.edit_message_text(
                f"üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üìñ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="get_assignment")
                ]])
            )
    
    async def handle_quiz_answer(self, query, user_id: int, callback_data: str):
        """Handle quiz answer submission"""
        session = quiz_handler.get_session(user_id)
        
        if not session:
            await query.edit_message_text(
                "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üìñ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="get_assignment")
                ]])
            )
            return
        
        if session.answered:
            await query.answer("–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å!")
            return
        
        # Parse the answer from callback data
        try:
            parts = callback_data.split("_", 2)
            option_index = int(parts[1])
            user_answer = parts[2]
        except (IndexError, ValueError):
            logger.error(f"Invalid callback data format: {callback_data}")
            await query.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç–≤–µ—Ç–∞")
            return
        
        # Set user answer
        session.set_user_answer(user_answer)
        is_correct = session.is_correct(user_answer)
        
        # Show loading message for feedback generation
        await query.edit_message_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç...")
        
        try:
            # Generate personalized feedback
            feedback = await openai_service.generate_feedback(
                session.question, user_answer, session.correct_answer, is_correct
            )
        except Exception as e:
            logger.error(f"Error generating feedback: {e}")
            feedback = None
        
        # Format and send result
        result_message = quiz_handler.format_result_message(session, is_correct, feedback)
        
        keyboard = [[InlineKeyboardButton("üìñ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="get_assignment")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            result_message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # End the quiz session
        quiz_handler.end_session(user_id)
        
        # Log result
        logger.info(f"User {user_id} answered {'correctly' if is_correct else 'incorrectly'}")
    
    def run(self):
        """Start the bot"""
        logger.info("Starting Inter-Slavic Bot...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    """Main function to run the bot"""
    bot = OldChurchSlavonicBot()
    bot.run()

if __name__ == "__main__":
    main()
