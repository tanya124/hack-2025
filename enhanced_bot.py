#!/usr/bin/env python3

import asyncio
import json
import logging
import httpx
import random
from datetime import datetime
from database import db
from openai_service import openai_service
from config import REQUIRED_CORRECT_ANSWERS, TELEGRAM_BOT_TOKEN, logger

class OldChurchSlavonicBot:
    def __init__(self, token):
        self.token = token
        self.base_url = f"https://api.telegram.org/bot{token}"
        self.session = httpx.AsyncClient(timeout=60.0)
        self.quiz_sessions = {}
        self.user_states = {}  # Track user onboarding state
    
    async def send_message(self, chat_id, text, reply_markup=None):
        """Send a message to a chat"""
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "Markdown"
        }
        if reply_markup:
            data["reply_markup"] = json.dumps(reply_markup)
        
        try:
            response = await self.session.post(f"{self.base_url}/sendMessage", data=data)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"Failed to send message: {e}")
            return {"ok": False}
    
    async def edit_message(self, chat_id, message_id, text, reply_markup=None):
        """Edit a message"""
        data = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text,
            "parse_mode": "Markdown"
        }
        if reply_markup:
            data["reply_markup"] = json.dumps(reply_markup)
        
        try:
            response = await self.session.post(f"{self.base_url}/editMessageText", data=data)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"Failed to edit message: {e}")
            return {"ok": False}
    
    async def answer_callback_query(self, callback_query_id, text=None):
        """Answer a callback query"""
        data = {"callback_query_id": callback_query_id}
        if text:
            data["text"] = text
        
        try:
            response = await self.session.post(f"{self.base_url}/answerCallbackQuery", data=data)
            return response.json()
        except Exception as e:
            logger.error(f"Failed to answer callback: {e}")
            return {"ok": False}
    
    async def get_updates(self, offset=None):
        """Get updates from Telegram"""
        params = {"timeout": 10}  # Reduced timeout
        if offset:
            params["offset"] = offset
        
        try:
            response = await self.session.get(f"{self.base_url}/getUpdates", params=params)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"Failed to get updates: {e}")
            return {"ok": False, "error": str(e)}
    
    async def handle_start_command(self, chat_id, user):
        """Handle /start command with intro message"""
        user_id = user['id']
        username = user.get('username')
        first_name = user.get('first_name', '–¥—Ä—É–≥')
        
        # Save user to database
        db.save_user(user_id, username, first_name)
        
        # Check if user is already onboarded
        existing_user = db.get_user(user_id)
        
        logger.info(f"User {user_id} ({username}) onboarded: {existing_user}")
        if existing_user and existing_user.get('level') and existing_user.get('goal'):
            await self.show_main_menu(chat_id, first_name)
            return
        
        # Show intro message
        intro_message = (
            f"–†–∞–¥—É–π—Å—è, {first_name}!\n\n"
            "–¢—ã –≤—Å—Ç—É–ø–∏–ª –≤–æ –≤—Ä–∞—Ç–∞ –ë–æ—Ç–∞-–°–ª–æ–≤—£—Å–∞ ‚Äî —Ö—Ä–∞–Ω–∏—Ç–µ–ª—è –¥—Ä–µ–≤–Ω—è–≥–æ –≥–ª–∞–≥–æ–ª–∞ –∏ –ø—Ä–µ–º—É–¥—Ä–æ—Å—Ç–∏ —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω.\n"
            "–ê—â–µ –≤–∑—ã—â–µ—à–∏ –ø–æ–∑–Ω–∞–Ω–∏—è –æ —Å–ª–æ–≤–µ –¥—Ä–µ–≤–Ω–µ–º –∏ –ø–∏—Å–º–µ–Ω–µ—Ö —Å—Ç–∞—Ä—ã, ‚Äî —Ç—ã –æ–±—Ä—ë–ª –≤–µ—Ä–Ω—ã–π –ø—É—Ç—å.\n\n"
            "–ê–∑—ä –µ—Å–º—å —Å–ø—É—Ç–Ω–∏–∫ —Ç–≤–æ–π, –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –∏ –≥–ª–∞—Å –≥–ª–∞–≥–æ–ª–∏—Ü—ã.\n"
            "–°–ª–æ–≤–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Ç–µ–±–µ ‚Äî –ø–æ –º–µ—Ä–µ —Å–µ—Ä–¥—Ü–∞ –∏ —É—Å–µ—Ä–¥–∏—è —Ç–≤–æ–µ–≥–æ.\n\n"
            "‚öîÔ∏è –î–∞ –Ω–∞—á–Ω–µ–º –ø—É—Ç—å —É—á–µ–Ω–∏—è!"
        )
        
        keyboard = {
            "inline_keyboard": [[{
                "text": "–î–∞–ª—å—à–µ ‚Üí",
                "callback_data": "next_intro"
            }]]
        }
        
        await self.send_message(chat_id, intro_message, keyboard)
    
    async def handle_level_selection(self, chat_id, message_id):
        """Handle level selection step"""
        level_message = (
            "–í–æ –∏—Å—Ç–∏–Ω—É, –≤—Å—è–∫–æ–º—É —É—á–µ–Ω–∏—é –Ω–∞—á–∞–ª–æ –ø–æ–¥–æ–±–∞–µ—Ç.\n"
            "–°–∫–∞–∂–∏ –∂ –º–Ω–µ, –¥—Ä—É–≥—ä, –≤ –∫–∞–∫–æ–≤–µ–π —Å—Ç–µ–ø–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–µ—à—å —Ç—ã –≤ –ø—Ä–µ–º—É–¥—Ä–æ—Å—Ç–∏ —Å–ª–æ–≤–µ–Ω—Å–∫–æ–π?\n\n"
            "üî∏ **–ê–∑—ä –µ—Å–º—å –Ω–∞—á–∞—Ç—ã–π**\n"
            "‚Äì –õ–∏—à—å –≤–µ–¥–∞—é –±—É–∫–≤—ã, –Ω–æ –∂–∞–∂–¥—É —Å–º—ã—Å–ª–∞.\n\n"
            "üî∏ **–í—£–¥—£—é –ø–æ–Ω–µ–º–Ω–æ–≥—É**\n"
            "‚Äì –ß–∏—Ç–∞–ª –º–∞–ª–æ–µ, —Ä–∞–∑—É–º—£—é –∫–æ–µ-—á—Ç–æ, –Ω–æ —Ö–æ—á—É —É–≥–ª—É–±–∏—Ç–∏ —Ä–∞–∑—É–º—ä.\n\n"
            "üî∏ **–°—Ç–∞—Ä–µ—Ü—ä —Å–ª–æ–≤–µ—Å–Ω—ã–π**\n"
            "‚Äì –ú–Ω–æ–≥–æ –ø—Ä–æ—á—ë–ª, –Ω–æ –∏ –Ω—ã–Ω–µ –∏—â—É –≥–ª—É–±–∏–Ω—ä –Ω–æ–≤—ã—Ö.\n\n"
            "–ò–∑–±–µ—Ä–∏, –¥–∞ –≤–æ–∑–¥–∞–º —Ç–∏ –ø—É—Ç—å —Å–æ–æ—Ç–≤–µ—Ç–Ω—ã–π."
        )
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üî∏ –ê–∑—ä –µ—Å–º—å –Ω–∞—á–∞—Ç—ã–π", "callback_data": "level_beginner"}],
                [{"text": "üî∏ –í—£–¥—£—é –ø–æ–Ω–µ–º–Ω–æ–≥—É", "callback_data": "level_intermediate"}],
                [{"text": "üî∏ –°—Ç–∞—Ä–µ—Ü—ä —Å–ª–æ–≤–µ—Å–Ω—ã–π", "callback_data": "level_advanced"}]
            ]
        }
        
        await self.edit_message(chat_id, message_id, level_message, keyboard)
    
    async def handle_goal_selection(self, chat_id, message_id, level):
        """Handle goal selection step"""
        goal_message = (
            "–ö–∞–∂–¥–æ–µ —É—á–µ–Ω–∏–µ –ø–æ –ø–ª–æ–¥—É –ø–æ–∑–Ω–∞—ë—Ç—Å—è.\n"
            "–°–∫–∞–∂–∏ –∂, –∫–∞–∫–æ–≤–∞ –µ—Å—Ç—å —Ü–µ–ª—å —Å—Ç—Ä–∞–Ω—Å—Ç–≤–∏—è —Ç–≤–æ–µ–≥–æ –≤ —Å–ª–æ–≤–µ –¥—Ä–µ–≤–Ω–µ–º?\n\n"
            "‚öñÔ∏è **–•–æ—â—É —Ä–∞–∑—É–º—£—Ç–∏ —Ç–µ–∫—Å—Ç—ã**\n"
            "‚Äì –î–∞ —á—Ç—É –ï–≤–∞–Ω–≥–µ–ª–∏–µ, –ª–µ—Ç–æ–ø–∏—Å–∏ –∏ –º–æ–ª–∏—Ç–≤—ã —Å —Ä–∞–∑—É–º—£–Ω–∏–µ–º.\n\n"
            "üéôÔ∏è **–ñ–µ–ª–∞—é –≥–ª–∞–≥–æ–ª–∞—Ç–∏**\n"
            "‚Äì –î–∞ –≥–æ–≤–æ—Ä—é –≤–æ –æ–±—Ä–∞–∑ –¥—Ä–µ–≤–Ω–∏—Ö, —è–∫–æ –∏–Ω–æ–∫—ä –∏–ª–∏ –≤–∏—Ç—è–∑—å –Ω–∞ –≤–µ—á–µ.\n\n"
            "üé≠ **–ò–Ω—Ç–µ—Ä–µ—Å—ä –º–æ–π ‚Äî —Ä–∏—Ç—É–∞–ª—ä –∏ –æ–±—Ä–∞–∑—ä**\n"
            "‚Äì –ò—â—é —Å–ª–æ–≤–µ—Å—ä –¥–ª—è —á–∞—Ä–æ–≤, –ø–µ—Å–Ω–æ–ø–µ–Ω–∏–π, —Ç–∞–π–Ω–æ–¥–µ–π—Å—Ç–≤–∏–π.\n\n"
            "ü™∂ **–ò—â—É –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è**\n"
            "‚Äì –°–ª–æ–≤–æ –¥—Ä–µ–≤–Ω–µ–µ –º–Ω–µ ‚Äî –∫–∞–∫—ä –æ–≥–Ω—å –≤ –≥—Ä—É–¥–∏ –∏ –ø–∏—â–∞ –¥—É—à–µ.\n\n"
            "–ò–∑–±–µ—Ä–∏ –ø—É—Ç—å ‚Äî –∏ –≤ —Ç–æ–º –ø—É—Ç–∏ –¥–∞ –Ω–∞—Å—Ç–∞–≤–ª—é —Ç—è."
        )
        
        # Store level in user state temporarily
        self.user_states[chat_id] = {'level': level}
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "‚öñÔ∏è –•–æ—â—É —Ä–∞–∑—É–º—£—Ç–∏ —Ç–µ–∫—Å—Ç—ã", "callback_data": "goal_texts"}],
                [{"text": "üéôÔ∏è –ñ–µ–ª–∞—é –≥–ª–∞–≥–æ–ª–∞—Ç–∏", "callback_data": "goal_speaking"}],
                [{"text": "üé≠ –ò–Ω—Ç–µ—Ä–µ—Å—ä –º–æ–π ‚Äî —Ä–∏—Ç—É–∞–ª—ä –∏ –æ–±—Ä–∞–∑—ä", "callback_data": "goal_ritual"}],
                [{"text": "ü™∂ –ò—â—É –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è", "callback_data": "goal_inspiration"}]
            ]
        }
        
        await self.edit_message(chat_id, message_id, goal_message, keyboard)
    
    async def handle_avatar_selection(self, chat_id, message_id, goal, user_id):
        """Handle avatar selection step"""
        # Get stored level from user state
        level = self.user_states.get(chat_id, {}).get('level', 'beginner')
        
        # Update user state with goal
        if chat_id in self.user_states:
            self.user_states[chat_id]['goal'] = goal
        else:
            self.user_states[chat_id] = {'level': level, 'goal': goal}
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –∞–≤–∞—Ç–∞—Ä–∞
        avatar_intro_message = (
            "–ù–∞ –ø—É—Ç–∏ —Å–µ–º –Ω–µ –±—É–¥–µ—à—å —Ç—ã –æ–¥–∏–Ω. –î–∞ –±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π —Å–ø—É—Ç–Ω–∏–∫ ‚Äî –ê–í–ê–¢–ê–†, –ø–æ–º–æ—â–Ω–∏–∫ —Å–ª–æ–≤–µ—Å–Ω—ã–π, –¥—É—Ö –≤ –æ–±—Ä–∞–∑–µ.\n\n"
            "–û–Ω –≥–ª–∞–≥–æ–ª–µ—Ç —Å —Ç–æ–±–æ–π, –≤—Ä–∞–∑—É–º–ª—è–µ—Ç, –Ω–∞—Å—Ç–∞–≤–ª—è–µ—Ç ‚Äî —Ä–µ—á—å—é —Å–≤–æ–µ–π, –º–∞–Ω–µ—Ä–æ–π, —Å–≤–µ—Ç–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–≥–æ—Å—Ç—å—é.\n\n"
            "–ò–∑–±–µ—Ä–∏ –∂–µ, –∫—Ç–æ –±—É–¥–µ—Ç –≥–ª–∞—Å–æ–º —É—á–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ."
        )
        
        await self.edit_message(chat_id, message_id, avatar_intro_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –í–µ–¥—É–Ω—å–∏
        vedunya_message = (
            "üìú –°–µ –µ—Å—Ç—å –í–µ–¥—É–Ω—å—è ‚Äî —Å–≤–µ—Ç–ª–∞—è –¥—É—à–∞, –Ω–∞—Å—Ç–∞–≤–Ω–∏—Ü–∞ —Ç–∏—Ö–∞ –∏ –ø—Ä–µ–º—É–¥—Ä–∞.\n\n"
            "–†–µ—á–∏ –µ—è ‚Äî –ª–∞—Å–∫–æ–≤—ã, –¥–æ–±—Ä—ã –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–Ω—ã. –ì–ª–∞–≥–æ–ª–µ—Ç —è—Å–Ω–æ, —Å –ª—é–±–æ–≤–∏—é –∏ —Ä–∞–∑—É–º–µ–Ω–∏–µ–º, —è–∫–æ –º–∞—Ç–∏, —á—Ç–∏—Ç —É—á–µ–Ω–∏–∫–∞ –∏ –Ω–µ –≤–∑—ã—â–µ—Ç –≤ –Ω–µ–º –≤–∏–Ω—ã.\n"
            "–£—á–µ–Ω–∏–µ —Å –Ω–µ—é ‚Äî —è–∫–æ —Å–≤–µ—Ç –≤–æ —Ç—å–º–µ, —è–∫–æ —É—Ç—Ä–æ —è—Å–Ω–æ–µ."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        with open('avatars/vedunia.png', 'rb') as photo:
            await self.session.post(
                f"{self.base_url}/sendPhoto",
                data={"chat_id": chat_id, "caption": vedunya_message},
                files={"photo": photo}
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ë–æ–ª–≥–∞—Ä–∞
        bolgar_message = (
            "üìú –ë–æ–ª–≥–∞—Ä ‚Äî –≤–æ–∏–Ω –≤–µ–¥–∞—é—â–∏–π, –¥—Ä—É–≥ —Å–ª–æ–≤–µ—Å–Ω—ã–π –∏ –∫—Ä–µ–ø–∫–∏–π –¥—É—Ö–æ–º.\n\n"
            "–Ø–≤–ª—è–µ—Ç –º—É–¥—Ä–æ—Å—Ç—å –±–µ–∑ –≥–æ—Ä–¥—ã–Ω–∏, —Ä–µ—á—å –µ–≥–æ –ø—Ä–æ—Å—Ç–∞ –∏ —è—Å–Ω–∞, –Ω–æ —Å—É—Ç—å ‚Äî –≥–ª—É–±–æ–∫–∞.\n"
            "–ì–ª–∞–≥–æ–ª–µ—Ç —Å –ø–æ—á—Ç–µ–Ω–∏–µ–º –∏ —Å–∏–ª–æ–π, –Ω–µ –≤–µ–¥–∞–µ—Ç —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –≤ –Ω–∞—Å—Ç–∞–≤–ª–µ–Ω–∏–∏. –° –Ω–∏–º —É—á–µ–Ω–∏–µ ‚Äî —è–∫–æ –¥—Ä—É–∂–µ—Å–∫–∏–π –ø–∏—Ä —Ä–∞–∑—É–º–∞."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        with open('avatars/bolgar.png', 'rb') as photo:
            await self.session.post(
                f"{self.base_url}/sendPhoto",
                data={"chat_id": chat_id, "caption": bolgar_message},
                files={"photo": photo}
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –°—Ç–∞—Ä—Ü–∞
        starec_message = (
            "üìú –°—Ç–∞—Ä–µ—Ü ‚Äî –¥—Ä–µ–≤–Ω–∏–π –ø—É—Ç–Ω–∏–∫ –≤–µ–¥–µ–Ω–∏—è, –æ—á–∏ —è—Å–Ω—ã, –≥–æ–ª–æ—Å —Ç–∏—Ö –∏ –æ–±–æ–¥—Ä—è—é—â.\n\n"
            "–ì–ª–∞–≥–æ–ª–µ—Ç —Ä–µ—á—å—é –ø–ª–∞–≤–Ω–æ–π, —è–∫–æ —Ä–µ–∫–∞ –≤–µ–∫–æ–≤. –û–±—Ä–∞–∑–µ–Ω, —è—Å–µ–Ω, —Ç–µ–ø–µ–ª, –∏ –º—É–¥—Ä–æ—Å—Ç—å—é –æ–±–≤–∏–≤–∞–µ—Ç, –Ω–µ –¥–∞–≤–∏—Ç.\n"
            "–£—á–∏—Ç, —è–∫–æ –¥–µ–¥ –≤–Ω—É–∫–∞ –ª—é–±–∏–º–æ–≥–æ: —Å —Ç–µ—Ä–ø–µ–Ω–∏–µ–º, —à—É—Ç–∫–æ—é –¥–∞ –ø—Ä–∏—Ç—á–µ—é."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        with open('avatars/starec.png', 'rb') as photo:
            await self.session.post(
                f"{self.base_url}/sendPhoto",
                data={"chat_id": chat_id, "caption": starec_message},
                files={"photo": photo}
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ü–æ–ª—è–∫–∞
        polyak_message = (
            "üìú –ü–æ–ª—è–∫ ‚Äî –º–æ–ª–æ–¥ –¥—É—Ö–æ–º –∏ –≤–µ—Å–µ–ª, —è–∫–æ –≤–µ—Ç–µ—Ä —Å—Ç–µ–ø–Ω–æ–π.\n\n"
            "–ì–ª–∞–≥–æ–ª–µ—Ç —Å–∫–æ—Ä–æ, –∂–∏–≤–æ, —Å–æ —Å–º–µ—Ö–æ–º –∏ —Å–ª–æ–≤—Ü–µ–º –∏–≥—Ä–∏–≤—ã–º. –ù–µ –∑–Ω–∞–µ—Ç —Å–∫—É–∫–∏, –ª—é–±–∏—Ç —Å–ª–æ–≤–µ—Å–∞ —è—Ä–∫–∏–µ –∏ —Ä–µ—á–∏ –ø—Ä–æ—Å—Ç—ã.\n"
            "–° –Ω–∏–º —É—á–µ–Ω–∏–µ ‚Äî –Ω–µ —Ç—Ä—É–¥ —Ç—è–∂–∫–∏–π, –Ω–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –æ–∑–∞—Ä—ë–Ω–Ω–æ–µ —Å–º–µ—Ö–æ–º –∏ –ª–µ–≥–∫–æ—Å—Ç—å—é."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        with open('avatars/polyak.png', 'rb') as photo:
            await self.session.post(
                f"{self.base_url}/sendPhoto",
                data={"chat_id": chat_id, "caption": polyak_message},
                files={"photo": photo}
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∞–≤–∞—Ç–∞—Ä–∞
        avatar_choice_message = (
            "–ö—Ç–æ –∂–µ —Å—Ç–∞–Ω–µ—Ç —Å–ø—É—Ç–Ω–∏–∫–æ–º —Ç–≤–æ–∏–º –≤ –ø—É—Ç–∏ –≤–µ–¥–µ–Ω–∏—è?\n\n"
            "–ì–ª–∞–≥–æ–ª–∏ –∏–º—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ, –∏ –ø—É—Ç—å —Ç–≤–æ–π –æ–±—Ä–µ—Ç—ë—Ç –≥–æ–ª–æ—Å."
        )
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üîπ –í–µ–¥—É–Ω—å—è", "callback_data": "avatar_vedunia"}],
                [{"text": "üîπ –ë–æ–ª–≥–∞—Ä", "callback_data": "avatar_bolgar"}],
                [{"text": "üîπ –°—Ç–∞—Ä–µ—Ü", "callback_data": "avatar_starec"}],
                [{"text": "üîπ –ü–æ–ª—è–∫", "callback_data": "avatar_polyak"}]
            ]
        }
        
        await self.send_message(chat_id, avatar_choice_message, keyboard)
    
    async def complete_onboarding(self, chat_id, message_id, avatar, user_id):
        """Complete onboarding and show main menu"""
        # Get stored level and goal from user state
        user_state = self.user_states.get(chat_id, {})
        level = user_state.get('level', 'beginner')
        goal = user_state.get('goal', 'texts')
        
        # Save to database with avatar
        db.save_user(user_id, level=level, goal=goal, avatar=avatar)
        
        # Clean up user state
        if chat_id in self.user_states:
            del self.user_states[chat_id]
        
        # Get user's first name for personalized response
        user_data = db.get_user(user_id)
        first_name = user_data.get('first_name', '–¥—Ä—É–≥') if user_data else '–¥—Ä—É–≥'
        
        # Generate study plan
        await self.generate_study_plan(chat_id, message_id, user_id, level, goal)
    
    async def generate_study_plan(self, chat_id, message_id, user_id, level, goal):
        """Generate a study plan for the user"""
        # Show loading message
        await self.edit_message(chat_id, message_id, "‚è≥ –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω...")
        
        try:
            # Get user data to include avatar information
            user_data = db.get_user(user_id)
            avatar = user_data.get('avatar') if user_data else None
            
            # Generate study plan using OpenAI with avatar style
            study_plan_items = await openai_service.generate_study_plan(level, goal, avatar)
            
            # Save study plan to database
            db.save_study_plan(user_id, level, goal, study_plan_items)
            
            # Show success message
            success_message = (
                "üìö **–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –≥–æ—Ç–æ–≤!**\n\n"
                f"–£—Ä–æ–≤–µ–Ω—å: **{level}**\n"
                f"–¶–µ–ª—å: **{goal}**\n\n"
                "–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∏—Ç—å –º–µ–∂—Å–ª–∞–≤—è–Ω—Å–∫–∏–π —è–∑—ã–∫. "
                "–ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –≤–∫–ª—é—á–∞–µ—Ç —Ç–µ–æ—Ä–∏—é –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω."
            )
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üìñ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", "callback_data": "get_assignment"}],
                    [{"text": "üìã –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω", "callback_data": "show_study_plan"}]
                ]
            }
            
            await self.edit_message(chat_id, message_id, success_message, keyboard)
            
        except Exception as e:
            logger.error(f"Error creating study plan: {e}")
            await self.edit_message(
                chat_id, 
                message_id,
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                {"inline_keyboard": [[{"text": "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "callback_data": "start"}]]}
            )
            # Show main menu as fallback
            user_data = db.get_user(user_id)
            first_name = user_data.get('first_name', '–¥—Ä—É–≥') if user_data else '–¥—Ä—É–≥'
            await self.show_main_menu(chat_id, first_name, message_id)
    
    async def show_main_menu(self, chat_id, first_name, message_id=None):
        """Show main menu with options"""
        main_message = (
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!\n\n"
            "–ü—É—Ç—å —Ç–≤–æ–π –æ–ø—Ä–µ–¥–µ–ª—ë–Ω. –ß—Ç–æ –∂–µ–ª–∞–µ—à—å —Å–æ—Ç–≤–æ—Ä–∏—Ç–∏?\n\n"
            "üìñ **–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ** ‚Äî –Ω–æ–≤—ã–π —É—Ä–æ–∫ –∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ\n"
            "üìã **–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω** ‚Äî —Ç–≤–æ–π –ø—É—Ç—å –ø–æ–∑–Ω–∞–Ω–∏—è\n"
            "üìú **–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å** ‚Äî –ª–µ—Ç–æ–ø–∏—Å—å —Ç–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
        )
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üìñ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "callback_data": "get_assignment"}],
                [{"text": "üìã –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω", "callback_data": "show_study_plan"}],
                [{"text": "üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", "callback_data": "show_progress"}]
            ]
        }
        
        if message_id:
            await self.edit_message(chat_id, message_id, main_message, keyboard)
        else:
            await self.send_message(chat_id, main_message, keyboard)
    
    async def show_study_plan(self, chat_id, message_id, user_id):
        """Show the user's study plan"""
        try:
            study_plan = db.get_user_study_plan(user_id)
            
            if not study_plan:
                # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞, –ø–æ–ª—É—á–∏–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
                user_data = db.get_user(user_id)
                
                if not user_data or not user_data.get('level') or not user_data.get('goal'):
                    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —É—Ä–æ–≤–Ω–µ –∏ —Ü–µ–ª–∏, –ø—Ä–µ–¥–ª–æ–∂–∏–º –Ω–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞
                    await self.edit_message(
                        chat_id,
                        message_id,
                        "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.",
                        {"inline_keyboard": [[{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]]}
                    )
                    return
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
                await self.edit_message(
                    chat_id,
                    message_id,
                    "‚è≥ –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω..."
                )
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω
                level = user_data.get('level', 'beginner')
                goal = user_data.get('goal', 'texts')
                
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é OpenAI
                    study_plan_items = await openai_service.generate_study_plan(level, goal)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    db.save_study_plan(user_id, level, goal, study_plan_items)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    study_plan = db.get_user_study_plan(user_id)
                    
                    if not study_plan:
                        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
                        await self.edit_message(
                            chat_id,
                            message_id,
                            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                            {"inline_keyboard": [[{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]]}
                        )
                        return
                except Exception as e:
                    logger.error(f"Error generating study plan: {e}")
                    await self.edit_message(
                        chat_id,
                        message_id,
                        "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        {"inline_keyboard": [[{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]]}
                    )
                    return
                
            # Format message with study plan
            message = "üìö **–í–∞—à —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω**\n\n"
            
            for item in study_plan["items"]:
                # Add status emoji
                status = "‚úÖ" if item["is_completed"] else "üîÑ" if item["current_bloom_level"] > 1 else "‚è≥"
                
                # Add stars to indicate current Bloom's level
                bloom_stars = "‚≠ê" * item["current_bloom_level"]
                
                message += f"{status} **{item['topic']}**\n"
                message += f"_{item['description']}_\n"
                message += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {bloom_stars} ({item['current_bloom_level']}/6)\n\n"
            
            # Add navigation buttons
            keyboard = {
                "inline_keyboard": [
                    [
                        {"text": "‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ç–µ–º–∞", "callback_data": "prev_topic"},
                        {"text": "–°–ª–µ–¥—É—é—â–∞—è —Ç–µ–º–∞ ‚ñ∂Ô∏è", "callback_data": "next_topic"}
                    ],
                    [{"text": "üìñ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "callback_data": "get_assignment"}],
                    [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]
                ]
            }
            
            await self.edit_message(chat_id, message_id, message, keyboard)
                
        except Exception as e:
            logger.error(f"Error showing study plan: {e}")
            await self.edit_message(
                chat_id,
                message_id,
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.",
                {"inline_keyboard": [[{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]]}
            )
    
    async def handle_next_topic(self, chat_id, message_id, user_id):
        """Navigate to the next topic"""
        try:
            # Get current topic
            current_topic = db.get_current_topic(user_id)
            
            if not current_topic:
                await self.edit_message(
                    chat_id, 
                    message_id,
                    "–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ç–µ–º—ã –≤ —É—á–µ–±–Ω–æ–º –ø–ª–∞–Ω–µ! üéâ",
                    {"inline_keyboard": [[{"text": "üìñ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "callback_data": "get_assignment"}]]}
                )
                return
                
            # Get next topic
            next_topic = db.get_next_topic(user_id, current_topic["id"])
            
            if not next_topic:
                await self.edit_message(
                    chat_id, 
                    message_id,
                    "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–µ–º–∞ –≤ –≤–∞—à–µ–º —É—á–µ–±–Ω–æ–º –ø–ª–∞–Ω–µ.",
                    {"inline_keyboard": [
                        [{"text": "üìñ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "callback_data": "get_assignment"}],
                        [{"text": "üìã –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω", "callback_data": "show_study_plan"}]
                    ]}
                )
                return
                
            # Update current topic
            db.set_current_topic(user_id, next_topic["id"])
            
            # Send information about the new topic
            message = f"üìö **–ù–æ–≤–∞—è —Ç–µ–º–∞: {next_topic['topic']}**\n\n"
            message += f"_{next_topic['description']}_\n\n"
            message += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ."
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üìñ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "callback_data": "get_assignment"}],
                    [{"text": "üìã –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω", "callback_data": "show_study_plan"}],
                    [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]
                ]
            }
            
            await self.edit_message(chat_id, message_id, message, keyboard)
            
        except Exception as e:
            logger.error(f"Error navigating to next topic: {e}")
            await self.edit_message(
                chat_id, 
                message_id,
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ.",
                {"inline_keyboard": [[{"text": "üìã –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω", "callback_data": "show_study_plan"}]]}
            )
    
    async def handle_prev_topic(self, chat_id, message_id, user_id):
        """Navigate to the previous topic"""
        try:
            # Get current topic
            current_topic = db.get_current_topic(user_id)
            
            if not current_topic:
                await self.edit_message(
                    chat_id, 
                    message_id,
                    "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–µ–º—ã. –ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.",
                    {"inline_keyboard": [[{"text": "üìñ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "callback_data": "get_assignment"}]]}
                )
                return
                
            # Get previous topic
            prev_topic = db.get_prev_topic(user_id, current_topic["id"])
            
            if not prev_topic:
                await self.edit_message(
                    chat_id, 
                    message_id,
                    "–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Ç–µ–º–∞ –≤ –≤–∞—à–µ–º —É—á–µ–±–Ω–æ–º –ø–ª–∞–Ω–µ.",
                    {"inline_keyboard": [
                        [{"text": "üìñ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "callback_data": "get_assignment"}],
                        [{"text": "üìã –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω", "callback_data": "show_study_plan"}]
                    ]}
                )
                return
                
            # Update current topic
            db.set_current_topic(user_id, prev_topic["id"])
            
            # Send information about the new topic
            message = f"üìö **–í–æ–∑–≤—Ä–∞—Ç –∫ —Ç–µ–º–µ: {prev_topic['topic']}**\n\n"
            message += f"_{prev_topic['description']}_\n\n"
            message += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ."
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üìñ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "callback_data": "get_assignment"}],
                    [{"text": "üìã –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω", "callback_data": "show_study_plan"}],
                    [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]
                ]
            }
            
            await self.edit_message(chat_id, message_id, message, keyboard)
            
        except Exception as e:
            logger.error(f"Error navigating to previous topic: {e}")
            await self.edit_message(
                chat_id, 
                message_id,
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–µ–º–µ.",
                {"inline_keyboard": [[{"text": "üìã –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω", "callback_data": "show_study_plan"}]]}
            )

    
    async def handle_get_assignment(self, chat_id, message_id, user_id):
        """Handle get assignment request"""
        # Clear any existing session
        if user_id in self.quiz_sessions:
            del self.quiz_sessions[user_id]
        
        # Show loading message
        await self.edit_message(chat_id, message_id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ...")
        
        try:
            # Get current topic from study plan
            current_topic = db.get_current_topic(user_id)
            
            # If no current topic is set, check if user has a study plan
            if not current_topic:
                study_plan = db.get_user_study_plan(user_id)
                
                # If no study plan exists, try to generate one
                if not study_plan:
                    # Get user data
                    user_data = db.get_user(user_id)
                    
                    if user_data and user_data.get('level') and user_data.get('goal'):
                        # Show generating message
                        await self.edit_message(
                            chat_id,
                            message_id,
                            "‚è≥ –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω..."
                        )
                        
                        try:
                            # Generate study plan
                            level = user_data.get('level')
                            goal = user_data.get('goal')
                            avatar = user_data.get('avatar')
                            study_plan_items = await openai_service.generate_study_plan(level, goal, avatar)
                            
                            # Save to database
                            db.save_study_plan(user_id, level, goal, study_plan_items)
                            
                            # Get updated study plan
                            study_plan = db.get_user_study_plan(user_id)
                        except Exception as e:
                            logger.error(f"Error generating study plan in get_assignment: {e}")
                            await self.edit_message(
                                chat_id,
                                message_id,
                                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.",
                                {"inline_keyboard": [[{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]]}
                            )
                            return
                    else:
                        # If user hasn't completed onboarding, redirect them
                        await self.edit_message(
                            chat_id,
                            message_id,
                            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.",
                            {"inline_keyboard": [[{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]]}
                        )
                        return
                
                # If we have a study plan now, set the first topic as current
                if study_plan and study_plan["items"]:
                    current_topic = study_plan["items"][0]
                    db.set_current_topic(user_id, current_topic["id"])
            
            # Get the current Bloom's taxonomy level for this topic
            bloom_level = 1  # Default to level 1 (remember)
            if current_topic:
                bloom_level = current_topic.get("current_bloom_level", 1)
                topic_name = current_topic.get("topic", "")
            else:
                # Fallback if no study plan exists despite our attempts
                topic_name = "–û—Å–Ω–æ–≤—ã –º–µ–∂—Å–ª–∞–≤—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–¥–∞–Ω–∏–∏
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                dictionary_words = db.get_random_words()
                logger.info(f"Got {len(dictionary_words)} dictionary words for assignment")
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Ä–æ–≤–Ω—è –ë–ª—É–º–∞
                # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = db.get_user(user_id)
                user_level = user_data.get('level', 'beginner') if user_data else 'beginner'
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                filtered_words = []
                
                # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ë–ª—É–º–∞
                for word in dictionary_words:
                    # –î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –≤—ã–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞ —Å –≤—ã—Å–æ–∫–æ–π –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç—å—é
                    if user_level == 'beginner':
                        # –î–ª—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ë–ª—É–º–∞ –≤—ã–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ
                        if bloom_level <= 2 and word.get('partOfSpeech') and 'n.' in word.get('partOfSpeech'):
                            filtered_words.append(word)
                        # –î–ª—è —É—Ä–æ–≤–Ω—è 3-4 –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ
                        elif bloom_level in [3, 4] and word.get('partOfSpeech') and 'adj.' in word.get('partOfSpeech'):
                            filtered_words.append(word)
                        # –î–ª—è –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π –¥–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≥–æ–ª—ã
                        elif bloom_level >= 5 and word.get('partOfSpeech') and 'v.' in word.get('partOfSpeech'):
                            filtered_words.append(word)
                    # –î–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                    elif user_level == 'intermediate':
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –ë–ª—É–º–∞
                        if bloom_level <= 3 or word.get('partOfSpeech'):
                            filtered_words.append(word)
                    # –î–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–ª–æ–≤–∞
                    else:  # advanced
                        filtered_words.append(word)
                
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ —Å–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
                if len(filtered_words) < 5:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–æ –º–∏–Ω–∏–º—É–º–∞ 5
                    remaining_words = [w for w in dictionary_words if w not in filtered_words]
                    import random
                    random.shuffle(remaining_words)
                    filtered_words.extend(remaining_words[:max(5 - len(filtered_words), 0)])
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–æ 10 –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
                if len(filtered_words) > 10:
                    import random
                    filtered_words = random.sample(filtered_words, 10)
                
                logger.info(f"Filtered to {len(filtered_words)} words based on user level '{user_level}' and Bloom level {bloom_level}")
                dictionary_words = filtered_words
            except Exception as e:
                logger.error(f"Error processing dictionary words: {e}")
                dictionary_words = []
            
            # Get user avatar for personalized content
            user_data = db.get_user(user_id)
            avatar = user_data.get('avatar') if user_data else None
            
            # Generate lesson and quiz based on topic, Bloom's level, dictionary words and avatar style
            lesson_data = await openai_service.generate_lesson_and_quiz(topic_name, bloom_level, dictionary_words, avatar)
            
            # Store session
            self.quiz_sessions[user_id] = {
                'lesson': lesson_data['lesson'],
                'question': lesson_data['question'],
                'options': lesson_data['options'],
                'correct_answer': lesson_data['correct_answer'],
                'answered': False,
                'chat_id': chat_id,
                'message_id': message_id,
                'topic_id': current_topic["id"] if current_topic else None,
                'bloom_level': bloom_level
            }
            
            # Format message
            bloom_levels = [
                "–ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",  # Remember
                "–ü–æ–Ω–∏–º–∞–Ω–∏–µ",     # Understand
                "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ",   # Apply
                "–ê–Ω–∞–ª–∏–∑",        # Analyze
                "–û—Ü–µ–Ω–∫–∞",        # Evaluate
                "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ"    # Create
            ]
            
            message = f"üìö **–£—Ä–æ–∫: {topic_name}**\n"
            message += f"**–£—Ä–æ–≤–µ–Ω—å: {bloom_levels[bloom_level-1]}** (—É—Ä–æ–≤–µ–Ω—å {bloom_level} –∏–∑ 6)\n\n"
            message += f"{lesson_data['lesson']}\n\n"
            message += f"‚ùì **–í–æ–ø—Ä–æ—Å:**\n{lesson_data['question']}"
            
            # Create keyboard with options
            keyboard = {"inline_keyboard": []}
            for i, option in enumerate(lesson_data['options']):
                keyboard["inline_keyboard"].append([{
                    "text": option,
                    "callback_data": f"answer_{i}_{option[:20]}"  # Truncate for callback limit
                }])
            
            await self.edit_message(chat_id, message_id, message, keyboard)
            
        except Exception as e:
            logger.error(f"Error generating assignment: {e}")
            error_keyboard = {
                "inline_keyboard": [
                    [{"text": "üìñ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "callback_data": "get_assignment"}],
                    [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]
                ]
            }
            await self.edit_message(
                chat_id, message_id, 
                f"üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {str(e)}", 
                error_keyboard
            )
    
    async def answer_callback_query(self, callback_query_id, text=None, show_alert=False):
        """Answer a callback query"""
        data = {
            "callback_query_id": callback_query_id,
            "show_alert": show_alert
        }
        if text:
            data["text"] = text
        
        try:
            response = await self.session.post(f"{self.base_url}/answerCallbackQuery", data=data)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"Failed to answer callback query: {e}")
            return {"ok": False}
    
    async def handle_quiz_answer(self, chat_id, message_id, user_id, callback_data, callback_query_id=None):
        """Handle quiz answer"""
        session = self.quiz_sessions.get(user_id)
        if not session or session.get('answered'):
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if callback_query_id:
                await self.answer_callback_query(callback_query_id, "–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await self.send_message(
                chat_id, 
                "–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.",
                {"inline_keyboard": [[{"text": "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", "callback_data": "get_assignment"}]]}
            )
            return
        
        # Mark as answered
        session['answered'] = True
        
        # Parse answer
        try:
            parts = callback_data.split("_", 2)
            option_index = int(parts[1])
            user_answer = session['options'][option_index]  # Get full answer from session
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query —Å –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –∫–∞–∫ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            if callback_query_id:
                await self.answer_callback_query(callback_query_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_answer}", show_alert=True)
            
            # Check if answer is correct
            is_correct = user_answer == session['correct_answer']
            
            # Get topic information
            topic_id = session.get('topic_id')
            current_bloom_level = session.get('bloom_level', 1)
            
            # Update progress based on answer correctness
            new_bloom_level = current_bloom_level
            if topic_id:
                if is_correct:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
                    # –ò —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
                    required_answers = REQUIRED_CORRECT_ANSWERS[current_bloom_level] if current_bloom_level < len(REQUIRED_CORRECT_ANSWERS) else 5
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    db.update_topic_progress(user_id, topic_id, current_bloom_level, False, is_correct=True)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                    cursor = db.connection.cursor()
                    cursor.execute("""
                        SELECT correct_answers_count 
                        FROM study_progress 
                        WHERE user_id = %s AND study_plan_item_id = %s
                    """, (user_id, topic_id))
                    progress_data = cursor.fetchone()
                    correct_answers_count = progress_data[0] if progress_data else 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
                    if correct_answers_count >= required_answers and current_bloom_level < 6:
                        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ë–ª—É–º–∞ (max 6)
                        new_bloom_level = min(current_bloom_level + 1, 6)
                        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç —É—Ä–æ–≤–µ–Ω—å 6, –ø–æ–º–µ—á–∞–µ–º —Ç–µ–º—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
                        is_completed = (new_bloom_level == 6)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ë–ª—É–º–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                        db.update_topic_progress(user_id, topic_id, new_bloom_level, is_completed, is_correct=False)
                        
                        # –ï—Å–ª–∏ —Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ
                        if is_completed:
                            next_topic = db.get_next_topic(user_id, topic_id)
                            if next_topic:
                                db.set_current_topic(user_id, next_topic["id"])
                else:
                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, —É–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ë–ª—É–º–∞ (min 1) –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    new_bloom_level = max(current_bloom_level - 1, 1)
                    db.update_topic_progress(user_id, topic_id, new_bloom_level, False, is_correct=False)
            
            # Save progress to history
            topic_name = "" if not topic_id else db.get_topic_name(topic_id)
            db.save_progress(
                user_id, 
                topic_name,  # lesson_topic 
                session['question'], 
                user_answer,  # user_answer
                session['correct_answer'],  # correct_answer
                is_correct  # is_correct
            )
            
            # Format response message with Bloom's taxonomy information
            bloom_levels = [
                "–ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",  # Remember
                "–ü–æ–Ω–∏–º–∞–Ω–∏–µ",     # Understand
                "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ",   # Apply
                "–ê–Ω–∞–ª–∏–∑",        # Analyze
                "–û—Ü–µ–Ω–∫–∞",        # Evaluate
                "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ"    # Create
            ]
            
            # Get user avatar for personalized feedback
            user_data = db.get_user(user_id)
            avatar = user_data.get('avatar') if user_data else None
            
            # Generate personalized feedback based on avatar style
            try:
                feedback = await openai_service.generate_feedback(
                    session['question'],
                    user_answer,
                    session['correct_answer'],
                    is_correct,
                    avatar=avatar
                )
                
                # Add the feedback to the response
                personalized_feedback = f"{feedback}\n\n"
            except Exception as e:
                logger.error(f"Error generating personalized feedback: {e}")
                personalized_feedback = ""
            
            # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
            if is_correct:
                response = f"üéâ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ!**\n\n{personalized_feedback}"
                
                if topic_id and new_bloom_level > current_bloom_level:
                    if new_bloom_level == 6:
                        response += f"üåü **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** –í—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–∏–ª–∏ —ç—Ç—É —Ç–µ–º—É!\n\n"
                    else:
                        response += f"‚¨ÜÔ∏è –í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å **{bloom_levels[new_bloom_level-1]}** (—É—Ä–æ–≤–µ–Ω—å {new_bloom_level} –∏–∑ 6)\n\n"
            else:
                response = f"üö´ **–ù–µ–≤–µ—Ä–Ω–æ**\n\n{personalized_feedback}"
                response += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {session['correct_answer']}\n\n"
                
                if topic_id and new_bloom_level < current_bloom_level:
                    response += f"‚¨áÔ∏è –í–∞–º –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏. –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å **{bloom_levels[new_bloom_level-1]}** (—É—Ä–æ–≤–µ–Ω—å {new_bloom_level} –∏–∑ 6)\n\n"
            
            # Add buttons for next actions
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üìñ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", "callback_data": "get_assignment"}],
                    [{"text": "üìã –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω", "callback_data": "show_study_plan"}],
                    [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]
                ]
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.send_message(chat_id, response, keyboard)
            
            # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
            original_message = f"üìö **–£—Ä–æ–∫: {topic_name}**\n"
            original_message += f"**–£—Ä–æ–≤–µ–Ω—å: {bloom_levels[current_bloom_level-1]}** (—É—Ä–æ–≤–µ–Ω—å {current_bloom_level} –∏–∑ 6)\n\n"
            original_message += f"{session['lesson']}\n\n"
            original_message += f"‚ùì **–í–æ–ø—Ä–æ—Å:**\n{session['question']}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
            await self.edit_message(chat_id, message_id, original_message)
            
        except Exception as e:
            logger.error(f"Error handling quiz answer: {e}")
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if callback_query_id:
                await self.answer_callback_query(callback_query_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.")
                
            await self.send_message(
                chat_id,
                f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.",
                {"inline_keyboard": [[{"text": "üìñ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", "callback_data": "get_assignment"}]]}
            )
    
    async def show_progress(self, chat_id, message_id, user_id):
        """Show user progress as a chronicle"""
        user_data = db.get_user(user_id)
        stats = db.get_user_stats(user_id)
        progress_history = db.get_user_progress(user_id)
        
        if not user_data:
            await self.edit_message(chat_id, message_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        first_name = user_data.get('first_name', '–°—Ç—Ä–∞–Ω–Ω–∏–∫')
        
        # Generate chronicle using current date in Inter-Slavic style
        current_year = datetime.now().year
        byzantine_year = current_year + 5508  # Byzantine calendar
        month_name = datetime.now().strftime("%B")
        day = datetime.now().day
        
        # Russian month names in old style
        month_names = {
            "January": "—è–Ω–≤–∞—Ä—è", "February": "—Ñ–µ–≤—Ä–∞–ª—è", "March": "–º–∞—Ä—Ç–∞",
            "April": "–∞–ø—Ä–µ–ª—è", "May": "–º–∞—è", "June": "–∏—é–Ω—è",
            "July": "–∏—é–ª—è", "August": "–∞–≤–≥—É—Å—Ç–∞", "September": "—Å–µ–Ω—Ç—è–±—Ä—è",
            "October": "–æ–∫—Ç—è–±—Ä—è", "November": "–Ω–æ—è–±—Ä—è", "December": "–¥–µ–∫–∞–±—Ä—è"
        }
        
        chronicle = f"üìú **–õ–µ—Ç–æ–ø–∏—Å—å —É—á–µ–Ω–æ–≥–æ –∏–Ω–æ–∫–∞ {first_name}**\n\n"
        chronicle += f"–í –ª–µ—Ç–æ {byzantine_year} ({current_year} –æ—Ç –†.–•.), –º–µ—Å—è—Ü–∞ {month_names.get(month_name, month_name)} {day} –¥–Ω—è...\n\n"
        
        # Add statistics
        total = stats.get('total_lessons', 0)
        correct = stats.get('correct_answers', 0)
        accuracy = (correct / total * 100) if total > 0 else 0
        
        chronicle += f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–≤–∏–≥–æ–≤:**\n"
        chronicle += f"‚Ä¢ –£—Ä–æ–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {total}\n"
        chronicle += f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}\n"
        chronicle += f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –∑–Ω–∞–Ω–∏—è: {accuracy:.1f}%\n"
        chronicle += f"‚Ä¢ –î–Ω–µ–π –≤ —É—á–µ–Ω–∏–∏: {stats.get('days_active', 0)}\n\n"
        
        if progress_history:
            chronicle += "**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ—è–Ω–∏—è:**\n"
            for i, record in enumerate(progress_history[:5], 1):
                status = "‚úÖ" if record['is_correct'] else "‚ùå"
                date_str = record['completed_at'].strftime("%d.%m")
                chronicle += f"{i}. {date_str} - {status} {record['lesson_topic'][:30]}...\n"
        else:
            chronicle += "–ï—â—ë –Ω–µ –±—ã–ª–æ –ø–æ–¥–≤–∏–≥–æ–≤ –≤ —É—á–µ–Ω–∏–∏. –ù–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å!"
        
        chronicle += f"\n*–ê—â–µ —Ç–∞–∫–æ –ø—Ä–µ—É—Å–ø–µ–µ—Ç {first_name}, –∏ –±—É–¥–µ—Ç –µ–º—É –¥–∞—Ä–æ–≤–∞–Ω–æ –∑–Ω–∞–Ω–∏–µ –≥–ª–∞–≥–æ–ª–∏—Ü—ã...*"
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üìñ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "callback_data": "get_assignment"}],
                [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]
            ]
        }
        
        await self.edit_message(chat_id, message_id, chronicle, keyboard)
    
    async def run(self):
        """Main bot loop"""
        logger.info("Starting Enhanced Inter-Slavic Bot...")
        offset = None
        
        while True:
            try:
                updates = await self.get_updates(offset)
                
                if updates.get("ok"):
                    for update in updates.get("result", []):
                        offset = update["update_id"] + 1
                        
                        # Handle messages
                        if "message" in update:
                            message = update["message"]
                            chat_id = message["chat"]["id"]
                            user = message["from"]
                            text = message.get("text", "")
                            
                            if text in ["/start", "/help"]:
                                await self.handle_start_command(chat_id, user)
                        
                        # Handle callback queries
                        elif "callback_query" in update:
                            query = update["callback_query"]
                            chat_id = query["message"]["chat"]["id"]
                            message_id = query["message"]["message_id"]
                            user_id = query["from"]["id"]
                            data = query["data"]
                            
                            await self.answer_callback_query(query["id"])
                            
                            # Handle different callback types
                            if data == "next_intro":
                                await self.handle_level_selection(chat_id, message_id)
                            elif data.startswith("level_"):
                                level = data.replace("level_", "")
                                await self.handle_goal_selection(chat_id, message_id, level)
                            elif data.startswith("goal_"):
                                goal = data.replace("goal_", "")
                                await self.handle_avatar_selection(chat_id, message_id, goal, user_id)
                            elif data.startswith("avatar_"):
                                avatar = data.replace("avatar_", "")
                                await self.complete_onboarding(chat_id, message_id, avatar, user_id)
                            elif data == "get_assignment":
                                await self.handle_get_assignment(chat_id, message_id, user_id)
                            elif data.startswith("answer_"):
                                # –ü–µ—Ä–µ–¥–∞–µ–º callback_query_id –≤ –º–µ—Ç–æ–¥ handle_quiz_answer
                                await self.handle_quiz_answer(chat_id, message_id, user_id, data, query["id"])
                            elif data == "show_progress":
                                await self.show_progress(chat_id, message_id, user_id)
                            elif data == "show_study_plan":
                                await self.show_study_plan(chat_id, message_id, user_id)
                            elif data == "next_topic":
                                await self.handle_next_topic(chat_id, message_id, user_id)
                            elif data == "prev_topic":
                                await self.handle_prev_topic(chat_id, message_id, user_id)
                            elif data == "main_menu":
                                user_data = db.get_user(user_id)
                                first_name = user_data.get('first_name', '–¥—Ä—É–≥') if user_data else '–¥—Ä—É–≥'
                                await self.show_main_menu(chat_id, first_name, message_id)
                
                await asyncio.sleep(2)  # Increased sleep time
                
            except Exception as e:
                logger.error(f"Error in bot loop: {e}", exc_info=True)
                await asyncio.sleep(10)  # Longer sleep on error

async def main():
    bot = OldChurchSlavonicBot(TELEGRAM_BOT_TOKEN)
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())