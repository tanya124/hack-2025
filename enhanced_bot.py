#!/usr/bin/env python3

import asyncio
import json
import logging
from datetime import datetime
from config import TELEGRAM_BOT_TOKEN, logger
from openai_service import openai_service
from database import db
import httpx

class OldChurchSlavonicBot:
    def __init__(self, token):
        self.token = token
        self.base_url = f"https://api.telegram.org/bot{token}"
        self.session = httpx.AsyncClient(timeout=60.0)
        self.quiz_sessions = {}
        self.user_states = {}  # Track user onboarding state
    
    async def send_message(self, chat_id, text, reply_markup=None):
        """Send a message to a chat"""
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "Markdown"
        }
        if reply_markup:
            data["reply_markup"] = json.dumps(reply_markup)
        
        try:
            response = await self.session.post(f"{self.base_url}/sendMessage", data=data)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"Failed to send message: {e}")
            return {"ok": False}
    
    async def edit_message(self, chat_id, message_id, text, reply_markup=None):
        """Edit a message"""
        data = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text,
            "parse_mode": "Markdown"
        }
        if reply_markup:
            data["reply_markup"] = json.dumps(reply_markup)
        
        try:
            response = await self.session.post(f"{self.base_url}/editMessageText", data=data)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"Failed to edit message: {e}")
            return {"ok": False}
    
    async def answer_callback_query(self, callback_query_id, text=None):
        """Answer a callback query"""
        data = {"callback_query_id": callback_query_id}
        if text:
            data["text"] = text
        
        try:
            response = await self.session.post(f"{self.base_url}/answerCallbackQuery", data=data)
            return response.json()
        except Exception as e:
            logger.error(f"Failed to answer callback: {e}")
            return {"ok": False}
    
    async def get_updates(self, offset=None):
        """Get updates from Telegram"""
        params = {"timeout": 10}  # Reduced timeout
        if offset:
            params["offset"] = offset
        
        try:
            response = await self.session.get(f"{self.base_url}/getUpdates", params=params)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"Failed to get updates: {e}")
            return {"ok": False, "error": str(e)}
    
    async def handle_start_command(self, chat_id, user):
        """Handle /start command with intro message"""
        user_id = user['id']
        username = user.get('username')
        first_name = user.get('first_name', '–¥—Ä—É–≥')
        
        # Save user to database
        db.save_user(user_id, username, first_name)
        
        # Check if user is already onboarded
        existing_user = db.get_user(user_id)
        if existing_user and existing_user.get('level') and existing_user.get('goal'):
            await self.show_main_menu(chat_id, first_name)
            return
        
        # Show intro message
        intro_message = (
            f"–†–∞–¥—É–π—Å—è, {first_name}!\n\n"
            "–¢—ã –≤—Å—Ç—É–ø–∏–ª –≤–æ –≤—Ä–∞—Ç–∞ –ë–æ—Ç–∞-–°–ª–æ–≤—£—Å–∞ ‚Äî —Ö—Ä–∞–Ω–∏—Ç–µ–ª—è –¥—Ä–µ–≤–Ω—è–≥–æ –≥–ª–∞–≥–æ–ª–∞ –∏ –ø—Ä–µ–º—É–¥—Ä–æ—Å—Ç–∏ —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω.\n"
            "–ê—â–µ –≤–∑—ã—â–µ—à–∏ –ø–æ–∑–Ω–∞–Ω–∏—è –æ —Å–ª–æ–≤–µ –¥—Ä–µ–≤–Ω–µ–º –∏ –ø–∏—Å–º–µ–Ω–µ—Ö —Å—Ç–∞—Ä—ã, ‚Äî —Ç—ã –æ–±—Ä—ë–ª –≤–µ—Ä–Ω—ã–π –ø—É—Ç—å.\n\n"
            "–ê–∑—ä –µ—Å–º—å —Å–ø—É—Ç–Ω–∏–∫ —Ç–≤–æ–π, –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –∏ –≥–ª–∞—Å –≥–ª–∞–≥–æ–ª–∏—Ü—ã.\n"
            "–°–ª–æ–≤–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Ç–µ–±–µ ‚Äî –ø–æ –º–µ—Ä–µ —Å–µ—Ä–¥—Ü–∞ –∏ —É—Å–µ—Ä–¥–∏—è —Ç–≤–æ–µ–≥–æ.\n\n"
            "‚öîÔ∏è –î–∞ –Ω–∞—á–Ω–µ–º –ø—É—Ç—å —É—á–µ–Ω–∏—è!"
        )
        
        keyboard = {
            "inline_keyboard": [[{
                "text": "–î–∞–ª—å—à–µ ‚Üí",
                "callback_data": "next_intro"
            }]]
        }
        
        await self.send_message(chat_id, intro_message, keyboard)
    
    async def handle_level_selection(self, chat_id, message_id):
        """Handle level selection step"""
        level_message = (
            "–í–æ –∏—Å—Ç–∏–Ω—É, –≤—Å—è–∫–æ–º—É —É—á–µ–Ω–∏—é –Ω–∞—á–∞–ª–æ –ø–æ–¥–æ–±–∞–µ—Ç.\n"
            "–°–∫–∞–∂–∏ –∂ –º–Ω–µ, –¥—Ä—É–≥—ä, –≤ –∫–∞–∫–æ–≤–µ–π —Å—Ç–µ–ø–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–µ—à—å —Ç—ã –≤ –ø—Ä–µ–º—É–¥—Ä–æ—Å—Ç–∏ —Å–ª–æ–≤–µ–Ω—Å–∫–æ–π?\n\n"
            "üî∏ **–ê–∑—ä –µ—Å–º—å –Ω–∞—á–∞—Ç—ã–π**\n"
            "‚Äì –õ–∏—à—å –≤–µ–¥–∞—é –±—É–∫–≤—ã, –Ω–æ –∂–∞–∂–¥—É —Å–º—ã—Å–ª–∞.\n\n"
            "üî∏ **–í—£–¥—£—é –ø–æ–Ω–µ–º–Ω–æ–≥—É**\n"
            "‚Äì –ß–∏—Ç–∞–ª –º–∞–ª–æ–µ, —Ä–∞–∑—É–º—£—é –∫–æ–µ-—á—Ç–æ, –Ω–æ —Ö–æ—á—É —É–≥–ª—É–±–∏—Ç–∏ —Ä–∞–∑—É–º—ä.\n\n"
            "üî∏ **–°—Ç–∞—Ä–µ—Ü—ä —Å–ª–æ–≤–µ—Å–Ω—ã–π**\n"
            "‚Äì –ú–Ω–æ–≥–æ –ø—Ä–æ—á—ë–ª, –Ω–æ –∏ –Ω—ã–Ω–µ –∏—â—É –≥–ª—É–±–∏–Ω—ä –Ω–æ–≤—ã—Ö.\n\n"
            "–ò–∑–±–µ—Ä–∏, –¥–∞ –≤–æ–∑–¥–∞–º —Ç–∏ –ø—É—Ç—å —Å–æ–æ—Ç–≤–µ—Ç–Ω—ã–π."
        )
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üî∏ –ê–∑—ä –µ—Å–º—å –Ω–∞—á–∞—Ç—ã–π", "callback_data": "level_beginner"}],
                [{"text": "üî∏ –í—£–¥—£—é –ø–æ–Ω–µ–º–Ω–æ–≥—É", "callback_data": "level_intermediate"}],
                [{"text": "üî∏ –°—Ç–∞—Ä–µ—Ü—ä —Å–ª–æ–≤–µ—Å–Ω—ã–π", "callback_data": "level_advanced"}]
            ]
        }
        
        await self.edit_message(chat_id, message_id, level_message, keyboard)
    
    async def handle_goal_selection(self, chat_id, message_id, level):
        """Handle goal selection step"""
        goal_message = (
            "–ö–∞–∂–¥–æ–µ —É—á–µ–Ω–∏–µ –ø–æ –ø–ª–æ–¥—É –ø–æ–∑–Ω–∞—ë—Ç—Å—è.\n"
            "–°–∫–∞–∂–∏ –∂, –∫–∞–∫–æ–≤–∞ –µ—Å—Ç—å —Ü–µ–ª—å —Å—Ç—Ä–∞–Ω—Å—Ç–≤–∏—è —Ç–≤–æ–µ–≥–æ –≤ —Å–ª–æ–≤–µ –¥—Ä–µ–≤–Ω–µ–º?\n\n"
            "‚öñÔ∏è **–•–æ—â—É —Ä–∞–∑—É–º—£—Ç–∏ —Ç–µ–∫—Å—Ç—ã**\n"
            "‚Äì –î–∞ —á—Ç—É –ï–≤–∞–Ω–≥–µ–ª–∏–µ, –ª–µ—Ç–æ–ø–∏—Å–∏ –∏ –º–æ–ª–∏—Ç–≤—ã —Å —Ä–∞–∑—É–º—£–Ω–∏–µ–º.\n\n"
            "üéôÔ∏è **–ñ–µ–ª–∞—é –≥–ª–∞–≥–æ–ª–∞—Ç–∏**\n"
            "‚Äì –î–∞ –≥–æ–≤–æ—Ä—é –≤–æ –æ–±—Ä–∞–∑ –¥—Ä–µ–≤–Ω–∏—Ö, —è–∫–æ –∏–Ω–æ–∫—ä –∏–ª–∏ –≤–∏—Ç—è–∑—å –Ω–∞ –≤–µ—á–µ.\n\n"
            "üé≠ **–ò–Ω—Ç–µ—Ä–µ—Å—ä –º–æ–π ‚Äî —Ä–∏—Ç—É–∞–ª—ä –∏ –æ–±—Ä–∞–∑—ä**\n"
            "‚Äì –ò—â—é —Å–ª–æ–≤–µ—Å—ä –¥–ª—è —á–∞—Ä–æ–≤, –ø–µ—Å–Ω–æ–ø–µ–Ω–∏–π, —Ç–∞–π–Ω–æ–¥–µ–π—Å—Ç–≤–∏–π.\n\n"
            "ü™∂ **–ò—â—É –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è**\n"
            "‚Äì –°–ª–æ–≤–æ –¥—Ä–µ–≤–Ω–µ–µ –º–Ω–µ ‚Äî –∫–∞–∫—ä –æ–≥–Ω—å –≤ –≥—Ä—É–¥–∏ –∏ –ø–∏—â–∞ –¥—É—à–µ.\n\n"
            "–ò–∑–±–µ—Ä–∏ –ø—É—Ç—å ‚Äî –∏ –≤ —Ç–æ–º –ø—É—Ç–∏ –¥–∞ –Ω–∞—Å—Ç–∞–≤–ª—é —Ç—è."
        )
        
        # Store level in user state temporarily
        self.user_states[chat_id] = {'level': level}
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "‚öñÔ∏è –•–æ—â—É —Ä–∞–∑—É–º—£—Ç–∏ —Ç–µ–∫—Å—Ç—ã", "callback_data": "goal_texts"}],
                [{"text": "üéôÔ∏è –ñ–µ–ª–∞—é –≥–ª–∞–≥–æ–ª–∞—Ç–∏", "callback_data": "goal_speaking"}],
                [{"text": "üé≠ –ò–Ω—Ç–µ—Ä–µ—Å—ä –º–æ–π ‚Äî —Ä–∏—Ç—É–∞–ª—ä –∏ –æ–±—Ä–∞–∑—ä", "callback_data": "goal_ritual"}],
                [{"text": "ü™∂ –ò—â—É –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è", "callback_data": "goal_inspiration"}]
            ]
        }
        
        await self.edit_message(chat_id, message_id, goal_message, keyboard)
    
    async def complete_onboarding(self, chat_id, message_id, goal, user_id):
        """Complete onboarding and show main menu"""
        # Get stored level from user state
        level = self.user_states.get(chat_id, {}).get('level', 'beginner')
        
        # Save to database
        db.save_user(user_id, level=level, goal=goal)
        
        # Clean up user state
        if chat_id in self.user_states:
            del self.user_states[chat_id]
        
        # Get user's first name for personalized response
        user_data = db.get_user(user_id)
        first_name = user_data.get('first_name', '–¥—Ä—É–≥') if user_data else '–¥—Ä—É–≥'
        
        await self.show_main_menu(chat_id, first_name, message_id)
    
    async def show_main_menu(self, chat_id, first_name, message_id=None):
        """Show main menu with options"""
        main_message = (
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!\n\n"
            "–ü—É—Ç—å —Ç–≤–æ–π –æ–ø—Ä–µ–¥–µ–ª—ë–Ω. –ß—Ç–æ –∂–µ–ª–∞–µ—à—å —Å–æ—Ç–≤–æ—Ä–∏—Ç–∏?\n\n"
            "üìñ **–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ** ‚Äî –Ω–æ–≤—ã–π —É—Ä–æ–∫ –∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ\n"
            "üìú **–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å** ‚Äî –ª–µ—Ç–æ–ø–∏—Å—å —Ç–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
        )
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üìñ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "callback_data": "get_assignment"}],
                [{"text": "üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", "callback_data": "show_progress"}]
            ]
        }
        
        if message_id:
            await self.edit_message(chat_id, message_id, main_message, keyboard)
        else:
            await self.send_message(chat_id, main_message, keyboard)
    
    async def handle_get_assignment(self, chat_id, message_id, user_id):
        """Handle get assignment request"""
        # Clear any existing session
        if user_id in self.quiz_sessions:
            del self.quiz_sessions[user_id]
        
        # Show loading message
        await self.edit_message(chat_id, message_id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ...")
        
        try:
            # Generate lesson and quiz
            lesson_data = await openai_service.generate_lesson_and_quiz()
            
            # Store session
            self.quiz_sessions[user_id] = {
                'lesson': lesson_data['lesson'],
                'question': lesson_data['question'],
                'options': lesson_data['options'],
                'correct_answer': lesson_data['correct_answer'],
                'answered': False,
                'chat_id': chat_id,
                'message_id': message_id
            }
            
            # Format message
            message = f"üìö **–£—Ä–æ–∫ –ø–æ —Å—Ç–∞—Ä–æ—Å–ª–∞–≤—è–Ω—Å–∫–æ–º—É —è–∑—ã–∫—É**\n\n"
            message += f"{lesson_data['lesson']}\n\n"
            message += f"‚ùì **–í–æ–ø—Ä–æ—Å:**\n{lesson_data['question']}"
            
            # Create keyboard with options
            keyboard = {"inline_keyboard": []}
            for i, option in enumerate(lesson_data['options']):
                keyboard["inline_keyboard"].append([{
                    "text": option,
                    "callback_data": f"answer_{i}_{option[:20]}"  # Truncate for callback limit
                }])
            
            await self.edit_message(chat_id, message_id, message, keyboard)
            
        except Exception as e:
            logger.error(f"Error generating assignment: {e}")
            error_keyboard = {
                "inline_keyboard": [
                    [{"text": "üìñ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "callback_data": "get_assignment"}],
                    [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]
                ]
            }
            await self.edit_message(
                chat_id, message_id, 
                f"üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {str(e)}", 
                error_keyboard
            )
    
    async def handle_quiz_answer(self, chat_id, message_id, user_id, callback_data):
        """Handle quiz answer"""
        session = self.quiz_sessions.get(user_id)
        if not session or session['answered']:
            return
        
        # Parse answer
        try:
            parts = callback_data.split("_", 2)
            option_index = int(parts[1])
            user_answer = session['options'][option_index]  # Get full answer from session
        except:
            return
        
        session['answered'] = True
        session['user_answer'] = user_answer
        is_correct = user_answer == session['correct_answer']
        
        # Show loading
        await self.edit_message(chat_id, message_id, "‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç...")
        
        try:
            # Generate feedback
            feedback = await openai_service.generate_feedback(
                session['question'], user_answer, session['correct_answer'], is_correct
            )
        except:
            feedback = None
        
        # Format result - SEND NEW MESSAGE instead of editing
        if is_correct:
            result = "‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ!**"
        else:
            result = f"‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.**\nüéØ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: **{session['correct_answer']}**"
        
        result_message = f"{result}\n\n"
        if feedback:
            result_message += f"üí° {feedback}\n\n"
        result_message += "–ß—Ç–æ –∂–µ–ª–∞–µ—à—å –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üìñ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "callback_data": "get_assignment"}],
                [{"text": "üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", "callback_data": "show_progress"}]
            ]
        }
        
        # Send new message instead of editing
        await self.send_message(chat_id, result_message, keyboard)
        
        # Save progress to database
        db.save_progress(
            user_id=user_id,
            lesson_topic="–£—Ä–æ–∫ —Å—Ç–∞—Ä–æ—Å–ª–∞–≤—è–Ω—Å–∫–æ–≥–æ",
            question=session['question'],
            user_answer=user_answer,
            correct_answer=session['correct_answer'],
            is_correct=is_correct
        )
        
        # Clean up session
        del self.quiz_sessions[user_id]
        logger.info(f"User {user_id} answered {'correctly' if is_correct else 'incorrectly'}")
    
    async def show_progress(self, chat_id, message_id, user_id):
        """Show user progress as a chronicle"""
        user_data = db.get_user(user_id)
        stats = db.get_user_stats(user_id)
        progress_history = db.get_user_progress(user_id)
        
        if not user_data:
            await self.edit_message(chat_id, message_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        first_name = user_data.get('first_name', '–°—Ç—Ä–∞–Ω–Ω–∏–∫')
        
        # Generate chronicle using current date in Old Church Slavonic style
        current_year = datetime.now().year
        byzantine_year = current_year + 5508  # Byzantine calendar
        month_name = datetime.now().strftime("%B")
        day = datetime.now().day
        
        # Russian month names in old style
        month_names = {
            "January": "—è–Ω–≤–∞—Ä—è", "February": "—Ñ–µ–≤—Ä–∞–ª—è", "March": "–º–∞—Ä—Ç–∞",
            "April": "–∞–ø—Ä–µ–ª—è", "May": "–º–∞—è", "June": "–∏—é–Ω—è",
            "July": "–∏—é–ª—è", "August": "–∞–≤–≥—É—Å—Ç–∞", "September": "—Å–µ–Ω—Ç—è–±—Ä—è",
            "October": "–æ–∫—Ç—è–±—Ä—è", "November": "–Ω–æ—è–±—Ä—è", "December": "–¥–µ–∫–∞–±—Ä—è"
        }
        
        chronicle = f"üìú **–õ–µ—Ç–æ–ø–∏—Å—å —É—á–µ–Ω–æ–≥–æ –∏–Ω–æ–∫–∞ {first_name}**\n\n"
        chronicle += f"–í –ª–µ—Ç–æ {byzantine_year} ({current_year} –æ—Ç –†.–•.), –º–µ—Å—è—Ü–∞ {month_names.get(month_name, month_name)} {day} –¥–Ω—è...\n\n"
        
        # Add statistics
        total = stats.get('total_lessons', 0)
        correct = stats.get('correct_answers', 0)
        accuracy = (correct / total * 100) if total > 0 else 0
        
        chronicle += f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–≤–∏–≥–æ–≤:**\n"
        chronicle += f"‚Ä¢ –£—Ä–æ–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {total}\n"
        chronicle += f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}\n"
        chronicle += f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –∑–Ω–∞–Ω–∏—è: {accuracy:.1f}%\n"
        chronicle += f"‚Ä¢ –î–Ω–µ–π –≤ —É—á–µ–Ω–∏–∏: {stats.get('days_active', 0)}\n\n"
        
        if progress_history:
            chronicle += "**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ—è–Ω–∏—è:**\n"
            for i, record in enumerate(progress_history[:5], 1):
                status = "‚úÖ" if record['is_correct'] else "‚ùå"
                date_str = record['completed_at'].strftime("%d.%m")
                chronicle += f"{i}. {date_str} - {status} {record['lesson_topic'][:30]}...\n"
        else:
            chronicle += "–ï—â—ë –Ω–µ –±—ã–ª–æ –ø–æ–¥–≤–∏–≥–æ–≤ –≤ —É—á–µ–Ω–∏–∏. –ù–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å!"
        
        chronicle += f"\n*–ê—â–µ —Ç–∞–∫–æ –ø—Ä–µ—É—Å–ø–µ–µ—Ç {first_name}, –∏ –±—É–¥–µ—Ç –µ–º—É –¥–∞—Ä–æ–≤–∞–Ω–æ –∑–Ω–∞–Ω–∏–µ –≥–ª–∞–≥–æ–ª–∏—Ü—ã...*"
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üìñ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "callback_data": "get_assignment"}],
                [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]
            ]
        }
        
        await self.edit_message(chat_id, message_id, chronicle, keyboard)
    
    async def run(self):
        """Main bot loop"""
        logger.info("Starting Enhanced Old Church Slavonic Bot...")
        offset = None
        
        while True:
            try:
                updates = await self.get_updates(offset)
                
                if updates.get("ok"):
                    for update in updates.get("result", []):
                        offset = update["update_id"] + 1
                        
                        # Handle messages
                        if "message" in update:
                            message = update["message"]
                            chat_id = message["chat"]["id"]
                            user = message["from"]
                            text = message.get("text", "")
                            
                            if text in ["/start", "/help"]:
                                await self.handle_start_command(chat_id, user)
                        
                        # Handle callback queries
                        elif "callback_query" in update:
                            query = update["callback_query"]
                            chat_id = query["message"]["chat"]["id"]
                            message_id = query["message"]["message_id"]
                            user_id = query["from"]["id"]
                            data = query["data"]
                            
                            await self.answer_callback_query(query["id"])
                            
                            # Handle different callback types
                            if data == "next_intro":
                                await self.handle_level_selection(chat_id, message_id)
                            elif data.startswith("level_"):
                                level = data.replace("level_", "")
                                await self.handle_goal_selection(chat_id, message_id, level)
                            elif data.startswith("goal_"):
                                goal = data.replace("goal_", "")
                                await self.complete_onboarding(chat_id, message_id, goal, user_id)
                            elif data == "get_assignment":
                                await self.handle_get_assignment(chat_id, message_id, user_id)
                            elif data.startswith("answer_"):
                                await self.handle_quiz_answer(chat_id, message_id, user_id, data)
                            elif data == "show_progress":
                                await self.show_progress(chat_id, message_id, user_id)
                            elif data == "main_menu":
                                user_data = db.get_user(user_id)
                                first_name = user_data.get('first_name', '–¥—Ä—É–≥') if user_data else '–¥—Ä—É–≥'
                                await self.show_main_menu(chat_id, first_name, message_id)
                
                await asyncio.sleep(2)  # Increased sleep time
                
            except Exception as e:
                logger.error(f"Error in bot loop: {e}", exc_info=True)
                await asyncio.sleep(10)  # Longer sleep on error

async def main():
    bot = OldChurchSlavonicBot(TELEGRAM_BOT_TOKEN)
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())